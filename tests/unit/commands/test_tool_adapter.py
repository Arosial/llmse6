import unittest

from arox.commands.tool_adapter import ToolAdapter


class TestToolAdapter(unittest.TestCase):
    def setUp(self):
        # Mock a function spec generated by generate_function_spec
        self.func_spec_required = {
            "name": "test_func",
            "description": "Test function with required parameters",
            "parameters": {
                "type": "object",
                "properties": {
                    "param1": {"type": "string", "description": "First parameter"},
                    "param2": {"type": "integer", "description": "Second parameter"},
                },
                "required": ["param1", "param2"],
            },
        }

        self.func_spec_optional = {
            "name": "test_func",
            "description": "Test function with optional parameters",
            "parameters": {
                "type": "object",
                "properties": {
                    "param1": {"type": "string", "description": "First parameter"},
                    "param2": {"type": "integer", "description": "Second parameter"},
                },
                "required": [],
            },
        }

        self.func_spec_mixed = {
            "name": "test_func",
            "description": "Test function with mixed parameters",
            "parameters": {
                "type": "object",
                "properties": {
                    "param1": {
                        "type": "array",
                        "items": {"type": "string"},
                        "description": "First parameter",
                    },
                    "param2": {"type": "integer", "description": "Second parameter"},
                },
                "required": ["param1"],
            },
        }

    def test_parse_required_params(self):
        """Test parsing a string with required parameters."""
        args_str = "value1 42"
        args, kwargs = ToolAdapter.parse_str_to_params(
            self.func_spec_required, args_str
        )
        self.assertEqual(args, ["value1", 42])
        self.assertEqual(kwargs, {})

    def test_parse_optional_params(self):
        """Test parsing a string with optional parameters."""
        args_str = "--param1 value1 --param2 42"
        args, kwargs = ToolAdapter.parse_str_to_params(
            self.func_spec_optional, args_str
        )
        self.assertEqual(args, [])
        self.assertEqual(kwargs, {"param1": "value1", "param2": 42})

    def test_parse_mixed_params(self):
        """Test parsing a string with mixed parameters."""
        args_str = "value1 value2 --param2 42"
        args, kwargs = ToolAdapter.parse_str_to_params(self.func_spec_mixed, args_str)
        self.assertEqual(args, [["value1", "value2"]])
        self.assertEqual(kwargs, {"param2": 42})

    def test_parse_invalid_params(self):
        """Test parsing an invalid string (missing required parameter)."""
        args_str = "--param2 42"
        with self.assertRaises(SystemExit):
            ToolAdapter.parse_str_to_params(self.func_spec_required, args_str)


if __name__ == "__main__":
    unittest.main()
